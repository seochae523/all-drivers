spring:
  application:
    name: all-drivers

  data:
    rest:
      default-page-size: 10

  main:
    allow-bean-definition-overriding: true
  # 데이터 소스 설정
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    # 작성 필요
    url: jdbc:mysql://${DB_HOST}:${DB_PORT}/${DB_SCHEMA}?serverTimezone=Asia/Seoul&characterEncoding=UTF-8
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
  # JPA 설정
  jpa:
    show-sql: true
    database: mysql
    hibernate:
      ddl-auto: none
    naming:
      physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
        hbm2ddl.import_files_sql_extractor: org.hibernate.tool.hbm2ddl.MultipleLinesSqlCommandExtractor
        current_session_context_class: org.springframework.orm.hibernate5.SpringSessionContext
        default_batch_fetch_size: 100
        jdbc.batch_size: 1000
        format_sql: true
  jwt:
    header: Authorization
    secret: ${JWT_SECRET}
  security:
    oauth2:
      client:
        registration:
#          apple:
#            client-id: ${APPLE_CLIENT_ID}
#            client-secret: AuthKey_${APPLE_KEY_ID}.p8/${APPLE_KEY_ID}/${APPLE_TEAM_ID}
#            redirect-uri: ${APPLE_REDIRECT_URL}
#            authorization-grant-type: authorization_code
#            client-authentication-method: POST
#            client-name: apple
#            scope:
#              - email
          naver:
            client-name: naver
            client_id: ${NAVER_CLIENT_ID}
            redirect_uri: ${NAVER_REDIRECT_URL}
            client_secret: ${NAVER_CLIENT_SECRET}
            authorization-grant-type: authorization_code
            scope:
              - name
              - email
          google:
            client-name: google
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: ${GOOGLE_REDIRECT_URL}
            scope:
              - profile
              - email
          kakao:
            client-name: kakao
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            redirect-uri: ${KAKAO_REDIRECT_URL}
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            scope:
              - profile_nickname
              # 비즈니스 앱 추가 이후 가능합니다.
              #- account_email

        provider:
#          apple:
#            authorization-uri: https://appleid.apple.com/auth/authorize?scope=name%20email&response_mode=form_post
#            token-uri: https://appleid.apple.com/auth/token
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
          kakao:
            authorizationUri: https://kauth.kakao.com/oauth/authorize
            tokenUri: https://kauth.kakao.com/oauth/token
            userInfoUri: https://kapi.kakao.com/v2/user/me
            userNameAttribute: id
cloud:
  aws:
    cloud-front:
      url: ${CLOUD_FRONT_URL}
    s3:
      url: ${S3_URL}
      bucket: ${S3_BUCKET_NAME}
    stack:
      auto: false
    region:
      static: ap-northeast-2
    credentials:
      accessKey: ${S3_ACCESS_KEY}
      secretKey: ${S3_SECRET_KEY}

    dynamodb:
      endpoint: ${DYNAMODB_ENDPOINT:http://localhost:8000}
      region: ${DYNAMODB_REGION}
      accessKey: ${DYNAMODB_ACCESS_KEY}
      secretKey: ${DYNAMODB_SECRET_KEY}




firebase:
  url: ${FCM_APP_URL}
  file-name: ${FCM_FILE_NAME}


open-api:
  license:
    base-url: ${LICENSE_BASE_URL}
    api-key: ${LICENSE_API_KEY}

sms:
  api-key : ${SMS_API_KEY}
  secret-key : ${SMS_SECRET_KEY}
  domain: ${SMS_DOMAIN}
  phone-number: ${SMS_PHONE_NUMBER}

management:
  endpoints:
    web:
      exposure:
        include: prometheus, health, info
  metrics:
    tags:
      application: ${spring.application.name}